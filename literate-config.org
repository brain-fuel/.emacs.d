* Matt Laine Literate Emacs Config

** Startup Screen + Geometry

This makes the startup screen and general geometry not look like total crap, and <ESC> to quit prompts in addition to C-g

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)                     ; Disable visible scroll bar
  (tool-bar-mode -1)                       ; Disable the toolbar
  (tooltip-mode -1)                        ; Disable tooltips
  (global-set-key
   (kbd "<escape>") 'keyboard-escape-quit) ; Make ESC quit prompts
  
#+end_src

** Font + theme.

I prefer Monoid font over the other stuff, but you have to have installed it first. You can find it at https://github.com/larsenwork/monoid

#+begin_src emacs-lisp
  
  (set-face-attribute
   'default nil
   :font "Monoid"
   :height 156)

  (load-theme 'manoj-dark)

#+end_src

** Package initialization

#+begin_src emacs-lisp
  
  (require 'package)
  (setq package-archives
	'(("melpa" . "https://melpa.org/packages/")
	  ("org"   . "https://orgmode.org/elpa/")
	  ("elpa"  . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** Packages

*** Evil Mode

For me, this is necessary. I can neither stand nor remember vanilla Emacs bindings. This is the first package I install, because without it I'm dingdonging around like a doofus.

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-fine-undo t)
    :config
    (evil-mode 1))

#+end_src

*** Magit

Only interface with Git better than the command line.

#+begin_src emacs-lisp

  (use-package magit)
  
#+end_src

*** LSP-Mode


#+begin_src emacs-lisp

  (use-package lsp-mode)

#+end_src

*** Swiper

Fuzzy searching.

#+begin_src emacs-lisp

  (use-package swiper)

#+end_src

*** Ivy & Counsel

Interactive interface for completion in Emacs.

#+begin_src emacs-lisp

  (use-package ivy
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-alt-done)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

#+end_src

*** Company (COMPlete ANYthing) Mode

#+begin_src emacs-lisp

  (use-package company)

#+end_src

*** Yankpad & YaSnippet

#+begin_src emacs-lisp

  (use-package yankpad
    :ensure t
    :defer 10
    :init
    (setq yankpad-file "~/.emacs.d/yankpad.org")
    :config
    (add-to-list 'company-backends #'company-yankpad))

  (use-package yasnippet
    :init
    (yas-global-mode 1))

#+end_src

*** Command Log Mode

#+begin_src emacs-lisp

  (use-package command-log-mode)

#+end_src

*** Which-Key Mode

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

#+end_src

*** Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :config (projectile-mode +1))
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

#+end_src

*** Languages

**** Elixir

***** Use-Package with fun ligature / symbols for different combinators

#+begin_src emacs-lisp

  (use-package elixir-mode
    :ensure t
    :init
    (add-hook 'elixir-mode-hook
	      (lambda ()
                (push '(">=" . ?\u2265) prettify-symbols-alist)
                (push '("<=" . ?\u2264) prettify-symbols-alist)
                (push '("!=" . ?\u2260) prettify-symbols-alist)
                (push '("==" . ?\u2A75) prettify-symbols-alist)
                (push '("=~" . ?\u2245) prettify-symbols-alist)
                (push '("<-" . ?\u2190) prettify-symbols-alist)
                (push '("->" . ?\u2192) prettify-symbols-alist)
                (push '("<-" . ?\u2190) prettify-symbols-alist)
                (push '("|>" . ?\u25B7) prettify-symbols-alist))))

#+end_src

***** Reformatting

#+begin_src emacs-lisp

 (use-package reformatter
    :ensure t
    :config
    (reformatter-define +elixir-format
      :program "mix"
      :args '("format" "-"))
    (defun +set-default-directory-to-mix-project-root (original-fun &rest args)
      (if-let* ((mix-project-root (and buffer-file-name
                                       (locate-dominating-file buffer-file-name
                                                               ".formatter.exs"))))
          (let ((default-directory mix-project-root))
            (apply original-fun args))
        (apply original-fun args)))
    (advice-add '+elixir-format-region :around #'+set-default-directory-to-mix-project-root)
    (add-hook 'elixir-mode-hook #'+elixir-format-on-save-mode)) 

#+end_src

***** LSP

This requires having elixir-ls built in order to use.

  (setq lsp-clients-elixir-server-executable "~/Projects/elixir-ls/release/erl25/language_server.sh")

#+end_src

*** Prettification

**** Rainbow delimiters

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

**** Prettify symbols

#+begin_src emacs-lisp

  (global-prettify-symbols-mode t)

#+end_src

** Line Numbering

Display line numbers everywhere except term-mode and eshell-mode

#+begin_src emacs-lisp

  (global-display-line-numbers-mode)
  (dolist (mode '(term-mode-hook
		  eshell-mode-hook
		  shell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  
#+end_src
